#include <iostream>
using namespace std;

int main() {
  \d{4} -\d{2} -\d{2}  //從文本裡找出 YYYY-MM-DD 格式的日期字串
  cat |dog            //從文本裡找出 cat 或 dog 字串
  [A-Z]\w+            //從文本裡找出所有字首是大寫的英文字
  ^[A-Za-z]\d{9}$     //驗證字串是否是台灣身份證字號
  \W                  //意思同等於 [^A-Za-z0-9_]
  \w                  //意思同等於 [A-Za-z0-9_]
  \d                  //意思同等於 [0-9]
  \D                  //意思同等於 [^0-9]
  \s                  //用來匹配所有的空白字元 (whitespace) - 空白 (space)、tab 和換行符號 \r \n
  \S                  //用來匹配 \s 以外的所有字
  [ ]                 //中括號用來表示一個字元集合 (character set)，整個中括號代表一個字元，裡面的內容就是這個字元的所有可能
  [^ ]                //是 [ ] 的相反，用來匹配不在字元集合裡面的字元
  [ ] (或 [^ ])       //中還可以用 - 符號來表示連續 (range) 的好幾個字元
  \t	                // tab character	tab 字元
  \n	                // line feed character	換行字元
  \v	                // vertical tab character	vertical tab 字元
  \f	                // from feed character	from feed 字元
  \r	                // carriaage return character	carriaage return 字元
  \0	                // null character	null 字元
  \.	                // "." character	點號字元
  \\	                // "" character	反斜線字元
  \+	                // "+" character	加號字元
  \*	                // "*" character	星號字元
  \?	                // "?" character	問號字元
  \^	                // "^" character	^ 字元
  \$	                // "$" character	錢號字元
  \[	                // "[" character	[ 字元
  \]	                // "]" character	] 字元
  \{	                // "{" character	{ 字元
  \}	                // "}" character	} 字元
  \(	                // "(" character	( 字元
  \)	                // ")" character	) 字元
  |	                  // "|" character	管線字元
  \/	                // "/" character	/ 字元
  
  +                   //+ 表示連續出現 1 次或多次
  *                   //* 表示連續出現 0 次或多次
  ?                   //表示出現 0 次或 1 次

  ()                  //比對所有跟括號內字元
  []                  //以任一順序比對括號中的字元與字串
  -                   //根據括號中的字元範圍比對字串中的任一部份



  {min,max}           //Quantifier {min,max} {n} {min,}
  

  ^[0-9]{10}$         //手機號碼：開頭到結尾都必須是數字，不得有連字符號
  ^[1-9]\d{4}$        //郵遞區號：5碼數字
  ^[A-Z]\d{9}$        //身分證字號：一碼英文大寫搭配9碼數字


  數字：^[0-9]*$

  n位的數字：^\d{n}$

  至少n位的數字：^\d{n,}$

  m-n位的數字：^\d{m,n}$

  零和非零開頭的數字：^(0|[1-9][0-9]*)$

  非零開頭的最多帶兩位小數的數字：^([1-9][0-9]*)+(.[0-9]{1,2})?$

  帶1-2位小數的正數或負數：^(\-)?\d+(\.\d{1,2})?$

  正數、負數、和小數：^(\-|\+)?\d+(\.\d+)?$

  有兩位小數的正實數：^[0-9]+(.[0-9]{2})?$

  有1~3位小數的正實數：^[0-9]+(.[0-9]{1,3})?$

  非零的正整數：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$

  非零的負整數：^\-[1-9][]0-9″*$ 或 ^-[1-9]\d*$

  非負整數：^\d+$ 或 ^[1-9]\d*|0$

  非正整數：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$

  非負浮點數：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$

  非正浮點數：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$

  正浮點數：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$

  負浮點數：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$

  浮點數：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$

  Email: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$

  網址: ((http|ftp|https)://)(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,4})*(/[a-zA-Z0-9\&%_\./-~-]*)?
  
  IP Address: ^()(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.){4}$

  HTML Tag Regex:/^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/

  密碼(以字母開頭，長度在6~18之間，只能包含字母、數字和下劃線)：^[a-zA-Z]\w{5,17}$

  強密碼(必須包含大小寫字母和數字的組合，不能使用特殊字元，長度在8-10之間)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$

  //如何編譯
  sudo mount -t vboxsf 1101_Compiler ./Desktop/CompilerJudgeHW2
  cd /Desktop/CompilerJudgeHW2/考試二

  flex -o lex.yy.c word_count.l
  gcc -o word_count lex.yy.c -lfl
  ./ wordcount < input.txt
}